--- Dining Philosophers.
--- See Lynch.  Distributed Algorithms. (RightLeftDP algorithm)

--- This is a CORRECT specification of the algorithm, in which the
--- philosophers are in loop (that is, as soon as they finish eating,
--- they are hungry again).  Also, this specification has a
--- round-robin schedule builtin.

(msos RIGHTLEFTDP is
 
 Pids = (Int) List .

 Queue = (Int, Pids) Map .

 Int ::= n .

 St .
 St ::= srem
      | stest-right
      | stest-left
      | sleave-try
      | scrit
      | sreset-right
      | sreset-left
      | sleave-exit 
      | stry
      | sexit .
      

 Label = {fair : Int, fair' : Int, q : Queue, q' : Queue, ...} .

 Proc .
 Proc ::= prc (Int, St) .

 Soup .
 Soup ::= Proc .
 Soup ::= Soup Soup [assoc comm] .

    Int' := (Int + 1) rem n,
               prc (Int, St) -{fair = Int, fair' = Int, ...}-> prc (Int, St')
 -- -----------------------------------------------------------------------------------
 (prc (Int, St) Soup) : Soup -{fair = Int, fair' = Int', ...}-> (prc (Int, St')) Soup .


    odd (Int)
 -- ------------------------------------------------
 prc (Int, stry) : Proc --> prc (Int, stest-right) .

    odd (Int),
    Pids := lookup (Int, Queue),
    Pids' := if (not Int in Pids) 
             then insert-back (Int, Pids)
             else Pids fi,
    Queue' := (Int |-> Pids') / Queue,
    St := if first (Pids') == Int
             then stest-left
             else stest-right fi
 -- ---------------------------------------------
 prc (Int, stest-right) : Proc 
    -{q = Queue, q' = Queue', -}-> prc (Int, St) .

    odd (Int),
    Pids := lookup (((Int + 1) rem n), Queue),
    Pids' := if (not Int in Pids) 
             then insert-back (Int, Pids)
             else Pids fi,
    Queue' := ((((Int + 1) rem n)) |-> Pids') / Queue,
    St := if first (Pids') == Int
             then sleave-try
             else stest-left fi
 -- ---------------------------------------------
 prc (Int, stest-left) : Proc 
    -{q = Queue, q' = Queue', -}-> prc (Int, St) .

    odd (Int)
 -- -----------------------------------------------
 prc (Int, sleave-try) : Proc --> prc (Int, scrit) .

    odd (Int)
 -- -----------------------------------------------
 prc (Int, scrit) : Proc --> prc (Int, sexit) .

    odd (Int)
 -- -----------------------------------------------
 prc (Int, sexit) : Proc --> prc (Int, sreset-right) .

    odd (Int), Pids := lookup (Int, Queue),
    Pids' := remove (Int, Pids),
    Queue' := (Int |-> Pids') / Queue
 -- -----------------------------------------------
 prc (Int, sreset-right) : Proc 
    -{q = Queue, q' = Queue', -}->
                prc (Int, sreset-left) .

    odd (Int), Pids := lookup (((Int + 1) rem n), Queue),
    Pids' := remove (Int, Pids),
    Queue' := ((((Int + 1) rem n)) |-> Pids') / Queue
 -- -----------------------------------------------
 prc (Int, sreset-left) : Proc 
    -{q = Queue, q' = Queue', -}-> prc (Int, sleave-exit) .

    odd (Int)
 -- -----------------------------------------------
 prc (Int, sleave-exit) : Proc --> prc (Int, srem) .

    odd (Int)
 -- -----------------------------------------
 prc (Int, srem) : Proc --> prc (Int, stry) .

--- code for even processes

    even (Int)
 -- -----------------------------------------------
 prc (Int, stry) : Proc --> prc (Int, stest-left) .

    even (Int),
    Pids := lookup (((Int + 1) rem n), Queue),
    Pids' := if (not Int in Pids) 
             then insert-back (Int, Pids)
             else Pids fi,
    Queue' := (((Int + 1) rem n) |-> Pids') / Queue,
    St := if first (Pids') == Int
             then stest-right
             else stest-left fi
 -- ---------------------------------------------
 prc (Int, stest-left) : Proc 
    -{q = Queue, q' = Queue', -}-> 
                prc (Int, St) .

    even (Int),
    Pids := lookup (Int, Queue),
    Pids' := if (not Int in Pids) 
             then insert-back (Int, Pids)
             else Pids fi,
    Queue' := (Int |-> Pids') / Queue,
    St := if first (Pids') == Int
             then sleave-try
             else stest-right fi
 -- ---------------------------------------------
 prc (Int, stest-right) : Proc 
    -{q = Queue, q' = Queue', -}-> 
                prc (Int, St) .

    even (Int)
 -- -----------------------------------------------
 prc (Int, sleave-try) : Proc --> prc (Int, scrit) .

    even (Int)
 -- -----------------------------------------------
 prc (Int, scrit) : Proc --> prc (Int, sexit) .

    even (Int)
 -- -----------------------------------------------
 prc (Int, sexit) : Proc --> prc (Int, sreset-left) .


    even (Int), Pids := lookup (Int, Queue),
    Pids' := remove (Int, Pids),
    Queue' := (Int |-> Pids') / Queue
 -- -----------------------------------------------
 prc (Int, sreset-left) : Proc 
    -{q = Queue, q' = Queue', -}->
                prc (Int, sreset-right) .

    even (Int), Pids := lookup (((Int + 1) rem n), Queue),
    Pids' := remove (Int, Pids),
    Queue' := (((Int + 1) rem n) |-> Pids') / Queue
 -- -----------------------------------------------
 prc (Int, sreset-right) : Proc 
    -{q = Queue, q' = Queue', -}->
                prc (Int, sleave-exit) .

    even (Int)
 -- -----------------------------------------------
 prc (Int, sleave-exit) : Proc --> prc (Int, srem) .


    even (Int)
 -- -----------------------------------------------
 prc (Int, srem) : Proc --> prc (Int, stry) .

sosm)

(mod SEARCH is
 including RIGHTLEFTDP .

 op initial-soup : Int -> Soup .
 op initial-rec : Int -> Record .
 op make-queue : Int -> Map{Int,Pids} .

 eq n = 100 .

 var I : Int .

 ceq make-queue (I) = I |-> [()] +++ make-queue (I - 1) if I > 0 .
  eq make-queue (0) = 0 |-> [()] .

 ceq initial-soup (I) = prc (I, stry) initial-soup (I - 1) if I > 0 .
  eq initial-soup (0) = prc (0, stry) .

 eq initial-rec (I) = { fair = 0, fair' = 0,
                        q = (make-queue (I)), q' = void } .

 op initial-conf : -> Conf .
 eq initial-conf = < initial-soup (n - 1) ::: 'Soup, initial-rec (n - 1) > .
                    
endm)

--- See is there is any deadlock. Since the algorithm is in loop there
--- should be NO final state (i.e., a state in which there is no
--- rewriting rule applicable.

(search initial-conf =>! C:Conf .)

--- Several misc. searches.  Depending on the number of philosophers,
--- the some searches may return results, some may not.

(search [1] initial-conf =>*
        < (prc (I1:Int, scrit)
           prc (I2:Int, scrit)
           S:Soup) ::: 'Soup, R:Record > .)

(search [1] initial-conf =>*
        < (prc (I1:Int, scrit)
           prc (I2:Int, scrit)
           prc (I3:Int, scrit)
           S:Soup) ::: 'Soup, R:Record > .)

(search [1] initial-conf =>*
        < (prc (I1:Int, scrit)
           prc (I2:Int, scrit)
           prc (I3:Int, scrit)
           prc (I4:Int, scrit)
           S:Soup) ::: 'Soup, R:Record > .)

(mod MODEL-CHECK is
 including MODEL-CHECKER .
 including SEARCH .

 subsort Conf < State .

 --- TRUE when process Int is in its critical section
 op crit : Int -> Prop .

 var I : Int .

 eq (< (prc (I, scrit) S:Soup) ::: 'Soup, R:Record >) |=  crit (I) = true .
endm)

(red modelCheck (initial-conf, <> crit (0)) .)
(red modelCheck (initial-conf, <> crit (1)) .)
(red modelCheck (initial-conf, <> crit (2)) .)
(red modelCheck (initial-conf, <> crit (3)) .)
