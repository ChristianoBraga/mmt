(mod MINIJAVAPROGRAM is
  including MiniJava' .
  op code : -> Exp .
  eq code = local ((accum (bind ide('Fac) (close (abs (bind ide('@)) (local (accum void (rec (bind (ide ('self)) (close (abs (bind (ide ('@))) (tup-seq ((((close (abs tup ((bind ide('num))) (local (accum (bind ide('r) (ref (alloc 0)))(accum (bind ide('recfac) (ref (alloc 0)))(accum (bind ide('nonrecfac) (ref (alloc 0)))void))) (seq (seq ((effect (assign-seq (deref ide('recfac)) ((app ide('self) (tup()))))), (effect (assign-seq (deref ide('nonrecfac)) ((app ide('self) (tup()))))), skip)) (app minus tup-seq ((app ((app nth(1) (assigned (deref ide('recfac))))) ((tup-seq ((ref (alloc (assigned (deref ide('num))))))))), (app ((app nth(2) (assigned (deref ide('nonrecfac))))) ((tup-seq ((ref (alloc (assigned (deref ide('num)))))))))))))))),((close (abs tup ((bind ide('num))) (local (accum (bind ide('num_aux) (ref (alloc 0)))void) (seq (seq ((cond (app lt tup-seq ((assigned (deref ide('num))), 1)) (effect (assign-seq (deref ide('num_aux)) (1))) (effect (assign-seq (deref ide('num_aux)) ((app times tup-seq ((assigned (deref ide('num))), (app ((app nth(1) (app ide('self) (tup())))) ((tup-seq ((ref (alloc (app minus tup-seq ((assigned (deref ide('num))), 1)))))))))))))), skip)) (assigned (deref ide('num_aux)))))))),((close (abs tup ((bind ide('num))) (local (accum (bind ide('i) (ref (alloc 0)))(accum (bind ide('fat) (ref (alloc 0)))void)) (seq (seq ((effect (assign-seq (deref ide('i)) ((assigned (deref ide('num)))))), (effect (assign-seq (deref ide('fat)) (1))), (while (app gt tup-seq ((assigned (deref ide('i))), 0)) (seq ((effect (assign-seq (deref ide('fat)) ((app times tup-seq ((assigned (deref ide('fat))), (assigned (deref ide('i)))))))), (effect (assign-seq (deref ide('i)) ((app minus tup-seq ((assigned (deref ide('i))), 1)))))))), skip)) (assigned (deref ide('fat)))))))))))))))) (app ide('self) (tup ())))))) void )) (app (app nth(0) (local (accum void (rec (bind (ide ('self)) (close (abs (bind (ide ('@))) (tup-seq ((((close (abs tup(bind(ide('@@))) (local void (seq (seq ((print (app ((app nth(0) (app (ide('Fac)) (tup())))) ((tup-seq ((ref (alloc 6))))))), skip)) 0))))))))))))) (app ide('self) (tup ())))) (tup-seq (ref (alloc 0)))) .
 endm)

(rew output(< code ::: 'Exp, init-rec >) .)

