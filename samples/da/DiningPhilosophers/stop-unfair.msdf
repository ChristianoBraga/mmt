--- Dining Philosophers.
--- See Lynch.  Distributed Algorithms. (RightLeftDP algorithm)

--- This is a CORRECT specification of the algorithm, in which the
--- philosophers are not in loop (that is, they eat and finish).
--- Also, this specification has no fairness specification builtin.

(msos RIGHTLEFTDP is
 
 Pids = (Int) List .

 Queue = (Int, Pids) Map .

 Int ::= n .

 St .
 St ::= srem
      | stest-right
      | stest-left
      | sleave-try
      | scrit
      | sreset-right
      | sreset-left
      | sleave-exit 
      | stry
      | sexit .
      

 Label = {out' : Int*, q : Queue, q' : Queue, ...} .

 Proc .
 Proc ::= prc (Int, St) .

 Soup .
 Soup ::= Proc .
 Soup ::= Soup Soup [assoc comm] .

               prc (Int, St) -{...}-> prc (Int, St')
 -- ---------------------------------------------------------
 (prc (Int, St) Soup) : Soup -{...}-> (prc (Int, St')) Soup .


    odd (Int)
 -- ------------------------------------------------
 prc (Int, stry) : Proc --> prc (Int, stest-right) .

    odd (Int),
    Pids := lookup (Int, Queue),
    Pids' := if (not Int in Pids) 
             then insert-back (Int, Pids)
             else Pids fi,
    Queue' := (Int |-> Pids') / Queue,
    first (Pids') == Int
 -- ---------------------------------------------
 prc (Int, stest-right) : Proc 
    -{q = Queue, q' = Queue', -}-> prc (Int, stest-left) .

    odd (Int),
    Pids := lookup (((Int + 1) rem n), Queue),
    Pids' := if (not Int in Pids) 
             then insert-back (Int, Pids)
             else Pids fi,
    Queue' := ((((Int + 1) rem n)) |-> Pids') / Queue,
    first (Pids') == Int
 -- ---------------------------------------------
 prc (Int, stest-left) : Proc 
    -{q = Queue, q' = Queue', -}-> prc (Int, sleave-try) .

    odd (Int)
 -- -----------------------------------------------
 prc (Int, sleave-try) : Proc --> prc (Int, scrit) .

    odd (Int)
 -- -----------------------------------------------
 prc (Int, scrit) : Proc -{out' = Int, -}-> prc (Int, sexit) .

    odd (Int)
 -- -----------------------------------------------
 prc (Int, sexit) : Proc --> prc (Int, sreset-right) .

    odd (Int), Pids := lookup (Int, Queue),
    Pids' := remove (Int, Pids),
    Queue' := (Int |-> Pids') / Queue
 -- -----------------------------------------------
 prc (Int, sreset-right) : Proc 
    -{q = Queue, q' = Queue', -}->
                prc (Int, sreset-left) .

    odd (Int), Pids := lookup (((Int + 1) rem n), Queue),
    Pids' := remove (Int, Pids),
    Queue' := ((((Int + 1) rem n)) |-> Pids') / Queue
 -- -----------------------------------------------
 prc (Int, sreset-left) : Proc 
    -{q = Queue, q' = Queue', -}-> prc (Int, sleave-exit) .

    odd (Int)
 -- -----------------------------------------------
 prc (Int, sleave-exit) : Proc --> prc (Int, srem) .

--- code for even processes

    even (Int)
 -- -----------------------------------------------
 prc (Int, stry) : Proc --> prc (Int, stest-left) .

    even (Int),
    Pids := lookup (((Int + 1) rem n), Queue),
    Pids' := if (not Int in Pids) 
             then insert-back (Int, Pids)
             else Pids fi,
    Queue' := (((Int + 1) rem n) |-> Pids') / Queue,
    first (Pids') == Int
 -- ---------------------------------------------
 prc (Int, stest-left) : Proc 
    -{q = Queue, q' = Queue', -}-> 
                prc (Int, stest-right) .

    even (Int),
    Pids := lookup (Int, Queue),
    Pids' := if (not Int in Pids) 
             then insert-back (Int, Pids)
             else Pids fi,
    Queue' := (Int |-> Pids') / Queue,
    first (Pids') == Int
 -- ---------------------------------------------
 prc (Int, stest-right) : Proc 
    -{q = Queue, q' = Queue', -}-> 
                prc (Int, sleave-try) .

    even (Int)
 -- -----------------------------------------------
 prc (Int, sleave-try) : Proc --> prc (Int, scrit) .

    even (Int)
 -- -----------------------------------------------
 prc (Int, scrit) : Proc -{out' = Int, -}-> prc (Int, sexit) .

    even (Int)
 -- -----------------------------------------------
 prc (Int, sexit) : Proc --> prc (Int, sreset-left) .


    even (Int), Pids := lookup (Int, Queue),
    Pids' := remove (Int, Pids),
    Queue' := (Int |-> Pids') / Queue
 -- -----------------------------------------------
 prc (Int, sreset-left) : Proc 
    -{q = Queue, q' = Queue', -}->
                prc (Int, sreset-right) .

    even (Int), Pids := lookup (((Int + 1) rem n), Queue),
    Pids' := remove (Int, Pids),
    Queue' := (((Int + 1) rem n) |-> Pids') / Queue
 -- -----------------------------------------------
 prc (Int, sreset-right) : Proc 
    -{q = Queue, q' = Queue', -}->
                prc (Int, sleave-exit) .

    even (Int)
 -- -----------------------------------------------
 prc (Int, sleave-exit) : Proc --> prc (Int, srem) .
sosm)

(mod SEARCH is
 including RIGHTLEFTDP .

 op initial-soup : Int -> Soup .
 op initial-rec : Int -> Record .
 op make-queue : Int -> Map{Int,Pid} .

 eq n = 4 .

 var I : Int .

 ceq make-queue (I) = I |-> [] +++ make-queue (I - 1) if I > 0 .
  eq make-queue (0) = 0 |-> [] .

 ceq initial-soup (I) = prc (I, stry) initial-soup (I - 1) if I > 0 .
  eq initial-soup (0) = prc (0, stry) .

 eq initial-rec (I) = { out' = (()).Seq{Int}, 
                        q = (make-queue (I)) } .

 op initial-conf : -> Conf .
 eq initial-conf = < initial-soup (n - 1) ::: 'Soup, initial-rec (n - 1) > .
                    
endm)

--- this should find all final states in which the out' component has
--- all the numbers from 0 to n-1.  There should be several different
--- final states, each with a different arrangement of numbers in
--- out', depending on the order in which the philosophers ate.

(search initial-conf =>! C:Conf .)

(mod MODEL-CHECK is
 including MODEL-CHECKER .
 including SEARCH .

 subsort Conf < State .

 op _in_ : Int Seq`(Int`) ~> Bool .

 var  I : Int .
 vars S S' : Seq`(Int`) .
 var  St : St .

 eq I in (S, I, S') = true .

 --- TRUE when the out' component contains all numbers from 0 to Int-1
 op check : Int Seq`(Int`) -> Bool .

 ceq check (I, S) = 
     I in S and check (I - 1, S) 
 if I > 0 .

 eq check (0, S) = 0 in S .

 op check : Int -> Prop .

 ceq (< S:Soup, { out' = S, PR:PreRecord } >) |= (check (I)) = true
 if check (I, S) .
endm)

(red modelCheck (initial-conf, <> check (n - 1)) .)
